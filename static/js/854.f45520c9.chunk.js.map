{"version":3,"file":"static/js/854.f45520c9.chunk.js","mappings":"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","sources":["webpack://react-way-of-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__AgFpy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__Aa5k7\",\"button\":\"ProfileInfo_button__4THij\",\"contact\":\"ProfileInfo_contact__MVbxm\",\"info\":\"ProfileInfo_info__lC07w\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])     // синхронизация, когда измениться статус\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {ProfileType} from \"../Profile\";\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nexport type ProfileFormData =  {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string | null\r\n}\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormData, PropsType> & PropsType> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {props.error && <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {<Field placeholder={\"Full name\"} name={\"fullName\"}\r\n                                          validate={[]}\r\n                                          component={Input}/>}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {<Field placeholder={\"\"} name={\"lookingForAJob\"}\r\n                                                  validate={[]}\r\n                                                  component={Input} type=\"checkbox\"\r\n\r\n            />}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {<Field placeholder={\"My professional skills\"}\r\n                                                       name={\"lookingForAJobDescription\"}\r\n                                                       validate={[]}\r\n                                                       component={Textarea}/>}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me</b>: {<Field placeholder={\"About me\"} name={\"aboutMe\"}\r\n                                         validate={[]}\r\n                                         component={Textarea}/>}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}:{<Field placeholder={key} name={\"contacts.\" + key}\r\n                                     validate={[]}\r\n                                     component={Input}/>}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileFormData, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {ProfilePropsType, ProfileType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport myPhoto from \"../../../assets/imges/myPhoto.png\";\r\nimport ProfileDataFormReduxForm, {ProfileFormData} from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const files = e.currentTarget.files;\r\n\r\n        if (files && files.length) {\r\n\r\n            props.savePhoto(files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileFormData) => {\r\n         props.saveProfile(formData).then(()=> {\r\n             setEditMode(false)\r\n         })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.profile.photos.large || myPhoto} className={s.mainPhoto}/>\r\n                    {\r\n                        props.isOwner && <label htmlFor=\"load_avatar\">\r\n                            <div className={s.button}>image</div>\r\n                        </label>\r\n                    }\r\n                    <input id={\"load_avatar\"} hidden type={\"file\"} onChange={onMainPhotoSelected}/>\r\n                    {editMode\r\n                        ? <ProfileDataFormReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                        : <ProfileData goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }} profile={props.profile} isOwner={props.isOwner}/>}\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataType) => {\r\n    const {contacts} = props.profile\r\n\r\n    type typeCont = keyof typeof contacts\r\n    const keysContackts:typeCont[] = Object.keys(props.profile.contacts) as typeCont[]\r\n\r\n\r\n    const drawContacts = keysContackts.map((key: typeCont) => {\r\n        return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n    })\r\n    return (\r\n        <div className={s.info}>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {\r\n                props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:{keysContackts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//& ProfileType\r\nexport type ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nexport const Contact = (props: ContactType) => {\r\n\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{props.contactTitle}</b>: {props.contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__r5Ws7\",\"posts\":\"MyPosts_posts__ZJfWZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__DLbbI\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://oper.ru/static/data/gallery/l1048753984.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React, {FormEvent, useMemo} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type PostFormDataType = {\r\n    newPostText: string\r\n}\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n\r\n    const maxLengthCreatorWrapper = useMemo(() =>\r\n            maxLengthCreator(10)\r\n        , []);\r\n\r\n    const handleSubmit = (formData: FormEvent) => {\r\n\r\n        props.handleSubmit(formData);\r\n        props.reset();\r\n    };\r\n\r\n    const handleKeyPress = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            event.preventDefault();\r\n            handleSubmit(event);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newPostText\"}\r\n                    placeholder={\"Post Message\"}\r\n                    validate={[required, maxLengthCreatorWrapper]}\r\n                    onKeyPress={handleKeyPress}/>\r\n            </div>\r\n            <div>\r\n                <button type={\"submit\"}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<PostFormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerProps} from \"./MyPostsContainer\";\r\nimport {AddNewPostFormRedux, PostFormDataType} from \"./AddNewPostForm\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsContainerProps) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCont}/>)\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport type MyPostsContainerProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileFormData} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: {\r\n        facebook: string | null,\r\n        website: string | null,\r\n        vk: string | null,\r\n        twitter: string | null,\r\n        instagram: string | null,\r\n        youtube: string | null,\r\n        github: string | null,\r\n        mainLink: string | null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePropsType = {\r\n    profile : ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto:(file: File) => void\r\n    saveProfile:(profile: ProfileFormData) => Promise<void>\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getFriendsProfile,\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileFormData} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    private userId: string | null = null;\r\n\r\n    refreshProfile() {\r\n        this.userId = this.props.match.params.userId;\r\n        if (!this.userId) {\r\n            this.userId = String(this.props.authorizedUserId)\r\n            if (!this.userId) {\r\n                this.props.history.push(\"login\")\r\n            }\r\n        }\r\n        this.props.getFriendsProfile()\r\n        this.props.getUserProfile(this.userId);\r\n        this.props.getStatus(this.userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    friends: state.profilePage.friends\r\n})\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    getFriendsProfile: () => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile:(profile: ProfileFormData) => Promise<void>\r\n}\r\n\r\nexport type ProfilePropsType =\r\n    ReturnType<typeof mapStateToProps>\r\n    & MapDispatchToPropsType\r\n    & RouteComponentProps<PathParamsType>\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, getFriendsProfile, savePhoto, saveProfile}),//\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer);"],"names":["props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","_Fragment","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","onSubmit","handleSubmit","error","className","styles","Field","placeholder","name","validate","component","Input","type","Textarea","Object","keys","profile","contacts","map","key","s","ProfileData","keysContackts","Contact","contactTitle","contactValue","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Preloader","src","photos","large","myPhoto","htmlFor","id","hidden","files","length","savePhoto","ProfileDataFormReduxForm","initialValues","formData","saveProfile","then","ProfileStatusWithHooks","message","likesCount","AddNewPostFormRedux","maxLengthCreatorWrapper","useMemo","maxLengthCreator","reset","required","onKeyPress","event","preventDefault","React","postsElements","posts","p","Post","likesCont","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","concat","userId","_createClass","this","match","params","String","authorizedUserId","history","push","getFriendsProfile","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Profile","compose","auth","isAuth","friends","withRouter","WithAuthRedirect"],"sourceRoot":""}