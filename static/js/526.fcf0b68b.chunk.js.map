{"version":3,"file":"static/js/526.fcf0b68b.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])     // синхронизация, когда измениться статус\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport { ProfileType} from \"../Profile\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n    const src = props.profile.photos.large ?? 'https://t3.ftcdn.net/jpg/05/24/30/02/360_F_524300228_egMskw0zvvdwNUFPeJLlplclKzFamXBk.jpg'\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={src}/>\r\n                    {/*{friends}*/}\r\n                </div>\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__r5Ws7\",\"posts\":\"MyPosts_posts__ZJfWZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__DLbbI\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://oper.ru/static/data/gallery/l1048753984.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React, {useMemo} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type PostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n\r\n    const maxLengthCreatorWrapper = useMemo(() =>\r\n            maxLengthCreator(10)\r\n        , []);\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} placeholder={\"Post Message\"}\r\n                       validate={[required, maxLengthCreatorWrapper]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<PostFormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerProps} from \"./MyPostsContainer\";\r\nimport {AddNewPostFormRedux, PostFormDataType} from \"./AddNewPostForm\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsContainerProps) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCont}/>)\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText:string) => {    //iz\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport type MyPostsContainerProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string,\r\n        website: null,\r\n        vk: string,\r\n        twitter: string,\r\n        instagram: string,\r\n        youtube: null,\r\n        github: string,\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type ProfilePropsType = {\r\n    profile : ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    // friends: ProfileType[]\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getFriendsProfile, getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {usersAPI} from \"../../api/api\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    private userId: string | null = null;\r\n\r\n    componentDidMount() {\r\n        this.userId = this.props.match.params.userId;\r\n        if (!this.userId) {\r\n            this.userId = String(this.props.authorizedUserId)//String(28786); //moi\r\n            if (!this.userId) {\r\n                this.props.history.push(\"login\")\r\n            }\r\n        }\r\n\r\n        this.props.getFriendsProfile()\r\n        this.props.getUserProfile(this.userId);\r\n        this.props.getStatus(this.userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n\r\n        const paramId = this.props.match.params.userId\r\n\r\n        if(this.userId !== paramId) {\r\n\r\n            this.userId = paramId;\r\n\r\n            this.props.getUserProfile(this.userId);\r\n            this.props.getStatus(this.userId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    // friends={this.props.friends}\r\n                    profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    friends: state.profilePage.friends\r\n})\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    getFriendsProfile:() => void\r\n}\r\n\r\nexport type ProfilePropsType =\r\n    ReturnType<typeof mapStateToProps>\r\n    & MapDispatchToPropsType\r\n    & RouteComponentProps<PathParamsType>\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus,getFriendsProfile}),//\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer);"],"names":["props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","_props$profile$photos","profile","Preloader","src","photos","large","className","s","ProfileStatusWithHooks","message","likesCount","AddNewPostFormRedux","reduxForm","form","maxLengthCreatorWrapper","useMemo","maxLengthCreator","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","React","postsElements","posts","map","p","Post","likesCont","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","userId","_createClass","key","this","match","params","String","authorizedUserId","history","push","getFriendsProfile","getUserProfile","getStatus","prevProps","prevState","snapshot","paramId","Profile","compose","auth","isAuth","friends","withRouter"],"sourceRoot":""}