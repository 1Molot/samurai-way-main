{"version":3,"file":"static/js/537.0755883f.chunk.js","mappings":"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","sources":["webpack://react-way-of-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__AgFpy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__Aa5k7\",\"button\":\"ProfileInfo_button__4THij\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])     // синхронизация, когда измениться статус\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React, {ChangeEvent} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport myPhoto from \"../../../assets/imges/myPhoto.png\";\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const files = e.currentTarget.files;\r\n\r\n        if (files && files.length) {\r\n\r\n            props.savePhoto(files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.profile.photos.large || myPhoto} className={s.mainPhoto}/>\r\n                    {\r\n                        props.isOwner && <label htmlFor=\"load_avatar\">\r\n                            <div className={s.button}>image</div>\r\n                        </label>\r\n                    }\r\n\r\n                    <input\r\n                        id={\"load_avatar\"}\r\n                        hidden\r\n                        type={\"file\"} onChange={onMainPhotoSelected}/>\r\n                </div>\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__r5Ws7\",\"posts\":\"MyPosts_posts__ZJfWZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__DLbbI\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://oper.ru/static/data/gallery/l1048753984.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React, {useMemo} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type PostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n\r\n    const maxLengthCreatorWrapper = useMemo(() =>\r\n            maxLengthCreator(10)\r\n        , []);\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} placeholder={\"Post Message\"}\r\n                       validate={[required, maxLengthCreatorWrapper]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<PostFormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerProps} from \"./MyPostsContainer\";\r\nimport {AddNewPostFormRedux, PostFormDataType} from \"./AddNewPostForm\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsContainerProps) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCont}/>)\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText:string) => {    //iz\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport type MyPostsContainerProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | undefined,\r\n    contacts: {\r\n        facebook: string,\r\n        website: null,\r\n        vk: string,\r\n        twitter: string,\r\n        instagram: string,\r\n        youtube: null,\r\n        github: string,\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type ProfilePropsType = {\r\n    profile : ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto:any //\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getFriendsProfile, getStatus, getUserProfile, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    private userId: string | null = null;\r\n\r\n    refreshProfile() {\r\n        this.userId = this.props.match.params.userId;\r\n        if (!this.userId) {\r\n            this.userId = String(this.props.authorizedUserId)\r\n            if (!this.userId) {\r\n                this.props.history.push(\"login\")\r\n            }\r\n        }\r\n        this.props.getFriendsProfile()\r\n        this.props.getUserProfile(this.userId);\r\n        this.props.getStatus(this.userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    friends: state.profilePage.friends\r\n})\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    getFriendsProfile: () => void\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport type ProfilePropsType =\r\n    ReturnType<typeof mapStateToProps>\r\n    & MapDispatchToPropsType\r\n    & RouteComponentProps<PathParamsType>\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, getFriendsProfile, savePhoto}),//\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer);"],"names":["props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","_Fragment","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","Preloader","className","s","src","photos","large","isOwner","htmlFor","id","hidden","type","files","length","savePhoto","ProfileStatusWithHooks","message","likesCount","AddNewPostFormRedux","reduxForm","form","maxLengthCreatorWrapper","useMemo","maxLengthCreator","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","React","postsElements","posts","map","p","Post","likesCont","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","concat","userId","_createClass","key","this","match","params","String","authorizedUserId","history","push","getFriendsProfile","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Profile","compose","auth","isAuth","friends","withRouter"],"sourceRoot":""}